name: 'Create application.properties'
description: 'Creates the application.properties file'
runs:
  using: "composite"
  steps:
    - run: |
        source .env
        cat << EOF > src/main/resources/application.properties

        spring.application.name=hng-java-boilerplate
        # database connection
        spring.datasource.url=jdbc:${DB_CONNECTION_STRING}
        spring.datasource.username=${DB_USERNAME}
        spring.datasource.password=${DB_PASSWORD}
        spring.jpa.hibernate.ddl-auto=validate

        # migration configuration
        spring.flyway.enabled=true
        spring.flyway.baseline-on-migrate=true
        spring.flyway.location=classpath:db/migration
        spring.flyway.url=jdbc:${DB_CONNECTION_STRING}
        spring.flyway.user=${DB_USERNAME}
        spring.flyway.password=${DB_PASSWORD}

        logging.pattern.console = %green(%d{HH:mm:ss.SSS}) %blue(%-5level) %red([%thread]) %yellow(%logger{15})- %msg%n

        #Swagger doc
        #springdoc.api-docs.path=/docs/yml
        springdoc.swagger-ui.path=/docs
        springdoc.api-docs.servers[0].url=https://api-java.boilerplate.hng.tech
        springdoc.api-docs.servers[0].description=Production Server
        springdoc.api-docs.servers[1].url=https://staging.api-java.boilerplate.hng.tech
        springdoc.api-docs.servers[1].description=Staging Server
        springdoc.api-docs.servers[2].url=https://deployment.api-java.boilerplate.hng.tech
        springdoc.api-docs.servers[2].description=Deployment Server

        # RabbitMQ configuration
        spring.rabbitmq.host=${RABBITMQ_HOST}
        spring.rabbitmq.port=${RABBITMQ_PORT}
        spring.rabbitmq.username=${RABBITMQ_USERNAME}
        spring.rabbitmq.password=${RABBITMQ_PASSWORD}
        rabbitmq.queue.email=${QUEUE_EMAIL}
        spring.rabbitmq.exchange.key=${EXCHANGE_KEY}
        spring.rabbitmq.routing.key=${ROUTING_KEY}

        ## twilio configuration
        spring.twilio.account.sid=${ACCOUNT_SID}
        spring.twilio.auth.token=${AUTH_TOKEN}
        spring.twilio.outgoing.sms.number=${SMS_NUMBER}


        #MultiPartfile config
        spring.servlet.multipart.max-file-size=50MB
        spring.servlet.multipart.max-request-size=50MB

        stripe.api.key=${STRIPE_API_KEY}
        client.url=https://staging.tifi.tv
        stripe.secret.key=${STRIPE_SECRET_KEY}
        ## twilio configuration
        # spring.twilio.account.sid=${ACCOUNT_SID}
        # spring.twilio.auth.token=${AUTH_TOKEN}
        # spring.twilio.outgoing.sms.number=${SMS_NUMBER}

        #Security configuration
        spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
        spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}


        # email configuration
        spring.mail.host=smtp.gmail.com
        spring.mail.port=587
        spring.mail.username=your-email@gmail.com
        spring.mail.password=your-email-password
        spring.mail.properties.mail.smtp.auth=true
        spring.mail.properties.mail.smtp.starttls.enable=true
        # sha512 string
        sha512.string=${SHA_STRING}
        # Database Connection pooling
        spring.datasource.hikari.minimum-idle=5
        spring.datasource.hikari.maximum-pool-size=20
        spring.datasource.hikari.idle-timeout=30000
        spring.datasource.hikari.pool-name=HikariCP
        spring.datasource.hikari.max-lifetime=1800000
        spring.datasource.hikari.connection-timeout=20000
        spring.datasource.hikari.leak-detection-threshold=15000
        # Configures Spring Boot to throw an exception if no handler is found for a request
        spring.mvc.throw-exception-if-no-handler-found=true
        spring.web.resources.add-mappings=false

        # JWT secret
        sha512.string=${JWT_SECRET}

        ## Payment Configuration
        paystack.secret.key=${PAYSTACK_SECRET_KEY}
        flutterwave.secret.key=${FLUTTERWAVE_SECRET_KEY}
                
        EOF
      shell: bash
