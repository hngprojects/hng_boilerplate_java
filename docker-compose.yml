version: "3"

services:
  backend:
    build: .
    ports:
      - "8080:8080"
    environment:
      - spring.datasource.url=jdbc:postgresql://postgresdb:5432/${DATABASE_NAME}
      - spring.datasource.username=${DATABASE_USERNAME}
      - spring.datasource.password=${DATABASE_PASSWORD}
      - spring.jpa.properties.hibernate.jdbc.time_zone=UTC
      - spring.jpa.hibernate.ddl-auto=update
      - spring.jpa.open-in-view=false
      - spring.data.jpa.repositories.bootstrap_mode=default
      - spring.flyway.enabled=true
      - spring.flyway.locations=classpath:db/migration
      - spring.flyway.user=${DATABASE_USERNAME}
      - spring.flyway.password=${DATABASE_PASSWORD}
    networks:
      - backend-net
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

  postgresdb:
    image: postgres:13
    container_name: db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DATABASE_NAME}
      - POSTGRES_USER=${DATABASE_USERNAME}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend-net

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    networks:
      - backend-net
    depends_on:
      - backend
    restart: unless-stopped

networks:
  backend-net:
    driver: bridge
    
volumes:
  postgres_data:
